#!/usr/bin/python
import sys, time, subprocess, getopt, signal, os
sys.path.append("./lib")
from RpiCobalt.RpiCobaltButtons import RpiCobaltButtons
from RpiCobalt.RpiCobaltLCD import RpiCobaltLCD


# local class to implement buttons.
class rpiDaemonBtns(RpiCobaltButtons):
	buttonTimer=0
	menuMode=False
	menuList=[[-1,"Go Back"], [-2,"Exit to Status"]]
	currMenuEntry=0
	currMenuLevel=0
	menuDisplayItem=False
	menuPath=""
	rclcd=object()

#	@classmethod
	def selectPress(self):
		if(self.buttonTimer==0):
			#no time event passed, so start the timer.
			self.buttonTimer=time.time()

#	@classmethod
	def selectRelease(self):
		self.buttonTimer=0
		if(self.menuMode):
			self.menuDisplayItem=True

#	@classmethod
	def upRelease(self):
		if(self.menuMode):
			self.currMenuEntry +=1
			if(self.currMenuEntry >= len(self.menuList)):
				self.currMenuEntry=0;

#	@classmethod
	def downRelease(self):
		if(self.menuMode):
			self.currMenuEntry -=1
			if(self.currMenuEntry < 0):
				self.currMenuEntry = len(self.menuList)-1

#	@classmethod
	def leftRelease(self):
		self.downRelease()

#	@classmethod
	def rightRelease(self):
		self.upRelease()
	
#	@classmethod
	def enterRelease(self):
		if(self.menuMode):
			if(self.menuList[self.currMenuEntry][0] == -1):
				self.currMenuLevel -= 1
				if(self.menuPath != "") :
					# strip the last directory entry off the path.
					(self.menuPath, tmpPath) = os.path.split(self.menuPath)
			elif(self.menuList[self.currMenuEntry][0] == -2):
				#reset all counters and exit menu mode.
				self.exitMenuMode()
			elif(self.menuList[self.currMenuEntry][0] == -3):
				# in a directory, let's add the directory to the path and decend.
				self.menuPath = self.menuPath + "/" +  self.menuList[self.currMenuEntry][1] 
				self.currMenuLevel += 1
			elif(self.menuList[self.currMenuEntry][0] == -4):
				# exec a sub script.  It may take control of the LCD, and that is ok.
				tmpOutput = subprocess.check_output(self.menuList[self.currMenuEntry][2])
				if(tmpOutput != ""):
					rclcd.write(tmpOutput)
					time.sleep(3)

			self.loadMenu()
			self.displayMenuItem(self.rclcd)


			if(self.currMenuLevel < 0):
				self.exitMenuMode()
	
	def displayMenuItem(self, rclcd):
		self.rclcd = rclcd
		if(self.menuMode and self.menuDisplayItem):
			# display the current entry in the menuList
			rclcd.write(" Select Option: " + self.menuList[self.currMenuEntry][1])

	def exitMenuMode(self):
		self.buttonTimer=0
		self.menuMode=False
		self.currMenuEntry=0
		self.currMenuLevel=0
		self.menuDisplayItem=False
		self.menuPath=""
		self.menuList=[[-1,"Go Back"], [-2,"Exit to Status"]]

	def loadMenu(self):
		# clear the list and add the default entries.
		self.menuList=[[-1,"Go Back"], [-2,"Exit to Status"]]
		self.currMenuEntry=0
		# read the current directory listing.
		for entry in os.listdir("./menu/" + self.menuPath):
			if(os.path.isdir("./menu/" + self.menuPath + "/" + entry)):
				tmpList = [-3, entry ]
				self.menuList.insert(0,tmpList)
			elif(os.path.isfile("./menu/" + self.menuPath + "/" + entry)):
				if(os.access("./menu/" + self.menuPath + "/" + entry, os.X_OK)):
					# get the name from the file.	
					fline=""
					f_script = open("./menu/" + self.menuPath + "/" + entry)
					if(f_script):
						line_cnt=0
						for line in f_script:
							if(line_cnt == 1) :
								fline=line[1:].lstrip()
								fline=fline.rstrip()
								break
							else:
								line_cnt += 1
					f_script.close()
					tmpList = [-4, fline, "./menu/" + self.menuPath + "/" +  entry]
					self.menuList.insert(0,tmpList)


	def enterMenuMode(self):
		self.rclcd.write(" Select Option:")
		self.menuMode=True
		self.loadMenu()


	


def signal_handler(signal, frame):
	rclcd.disconnect()
	print('LCD Daemon Exit.')
	sys.exit(0)

pretend = False
def parseArgs(argv):
	global pretend
	try:
		opts, args = getopt.getopt(argv, "hp",["help", "pretend"])
	except getopt.GetoptError:
		print sys.argv[0] + ": [-h | --help] [-p | --pretend]\n\n"
		sys.exit(2)
	for opt, arg in opts:
		if(opt in ("-h", "--help")):
			print sys.argv[0] + ": [-h | --help] [-p | --pretend]\n\n"
			sys.exit()
		elif(opt in ("-p", "--pretend")):
			pretend=True


if __name__ == "__main__":
	parseArgs(sys.argv[1:])
	
signal.signal(signal.SIGINT, signal_handler)

rcbtn = rpiDaemonBtns()

rclcd = RpiCobaltLCD()
rcbtn.rclcd = rclcd
rclcd.pretend = pretend
rclcd.init("/dev/ttyAMA0", "115200")
rclcd.connect()

time.sleep(1)
counter=0
button_line = "";
menuTimer=0
while(rclcd.connected) :
	
	# button read from the LCD lib
	# and send it to the button lib for processing.
	tmpFuncStr=rcbtn.parseButtons(rclcd.readButtons())
	if(tmpFuncStr != ""):
		sys.stdout.write(tmpFuncStr)
		#call the fuction returned from rcbtn.parseButtons()
		rcbtn.buttonAction(tmpFuncStr)
		menuTimer=time.time()
	if(rcbtn.menuMode):
		rcbtn.displayMenuItem(rclcd)
		if(time.time() - menuTimer > 30):
			rcbtn.exitMenuMode()
			menuTimer=0
	else:
		#check for menu mode change.
		if(rcbtn.buttonTimer > 0) :
			#see how long we have been holding the select button
			tmpTime = time.time()
			if((tmpTime - rcbtn.buttonTimer) > 3):
				# enter menu mode if button is held longer than 3 seconds
				rcbtn.enterMenuMode()
				menuTimer=time.time()
		if(not rcbtn.menuMode):
			statusMsg = subprocess.check_output("./status")
			statusMsg = statusMsg.rstrip();
			if(statusMsg != "") : 
				rclcd.write(statusMsg + "\n")
			else: 
				rclcd.write("RPi Cobalt      v. 0.1\n")
